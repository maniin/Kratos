<?xml version="1.0" encoding="utf-8"?>
<container n="Results" pn="Results" un="Results" state="normal" open="1" open_window="0" icon="seeResults" help="Results configuration">
    <container n="OnElement" pn="On element" un="ElementResults" icon="select" help="Activate the results you want to see on elements" state="[ActiveIfAnyPartState]" open_window="0">
        <dynamicnode command="spdAux::injectElementOutputs" args=""/>
        <dynamicnode command="spdAux::injectConstitutiveLawOutputs" args=""/>
    </container>
    <container n="OnNodes" pn="On nodes" un="NodalResults" icon="select" help="Activate the results you want to see on nodes" open_window="0">
        <value n="PARTITION_INDEX" pn="Partition index" v="Yes" values="Yes,No" help="" state="[checkStateByUniqueName ParallelType MPI]"/>
        <dynamicnode command="spdAux::injectNodalConditionsOutputs" args=""/>
    </container>
    <container n="FileOptions" pn="Output file" un="FileOptions" open_window="0" icon="select" help="Configuration of the output files">
      <value n="FileLabel" pn="File Label" v="step" values="time,step" dict="time,Time,step,Step" help="Select if the label for the written results file/s is the step number or the analysis time" icon="data"/>
      <value n="OutputControlType" pn="Output frequency type" v="step" values="time,step" dict="time,Time,step,Steps" help="Select the frecuency result files will be written" update_proc="spdAux::RequestRefresh" icon="data">
	<dependencies node="../value" actualize="1"/>
      </value>
      <value n="OutputDeltaTime" pn="Time between outputs (s)" v="1.0" help="Output will be printed in intervals of this time" state="[getStateFromXPathValue {string(../value[@n='OutputControlType']/@v)} time]" icon="data"/>
      <value n="OutputDeltaStep" pn="Steps between outputs" v="1" help="Output will be printed in intervals of this number of steps" state="[getStateFromXPathValue {string(../value[@n='OutputControlType']/@v)} step]" icon="data"/>
      <value n="GiDMultiFileFlag" pn="Result file" v="MultipleFiles" values="SingleFile,MultipleFiles" dict="SingleFile,Single,MultipleFiles,Multiple" icon="data" help="Write one GiD result file or multiple files"/>
      <value n="GiDPostMode" pn="Result format" v="GiD_PostBinary" values="GiD_PostBinary,GiD_PostAscii,GiD_PostAsciiZipped" dict="GiD_PostBinary,Binary,GiD_PostAscii,Ascii,GiD_PostAsciiZipped,Ascii zipped" icon="data" help="Select the format for GiD results file/s" />
    </container>
    <container n="GiDOptions" pn="Options" un="GiDOptions" help="Configuration of the output results" open_window="0" icon="select">
      <value n="NodeOutput" pn="Node output" v="No" values="Yes,No" help="The nodes are printed as a separate layer" state="[ShowInMode Developer]" icon="data"/>
      <value n="GiDWriteConditionsFlag" pn="Body output" v="WriteElementsOnly" values="WriteConditions,WriteElementsOnly,WriteConditionsOnly" dict="WriteConditions,Write conditions,WriteElementsOnly,Write elements only,WriteConditionsOnly,Write conditions only" icon="data" help="Write the conditions or only element to the GiD result file"/>
      <value n="GiDWriteMeshFlag" pn="Print deformed mesh" v="WriteDeformed" values="WriteDeformed,WriteUndeformed" dict="WriteDeformed,Write deformed,WriteUndeformed, Write undeformed" icon="data" help="Write the GiD deformed or undeformed mesh"/>
      <value n="EchoLevel" pn="Verbosity of terminal output" v="0" values="0,1,2,3" icon="data" help="Verbosity on screen output during process. \n0 -> Low verbosity \n3 -> High verbosity"/>
    </container>
    <container n="CutPlanes" pn="Cut planes" icon="cut" state="hidden" open_window="0">
        <blockdata n='CutPlane' name='CutPlane' editable_name="unique" sequence='1' can_delete_last_item='1' icon="slice">
            <value n="point" pn="Point" fieldtype="vector" dimensions="3" format="%.6g" v="0.0,0.0,0.0" pick_point="0"/>
            <value n="normal" pn="Normal" fieldtype="vector" dimensions="3" format="%.6g" v="0.0,0.0,0.0" pick_point="0"/>
        </blockdata>
    </container>
</container>
